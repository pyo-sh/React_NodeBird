{"ast":null,"code":"import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n  // return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    // yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI() {// 서버에 요청을 보내는 부분\n  //return axios.post('/login');\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI);\n    yield delay(2000);\n    throw new Error('에러에러에러');\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/Program Files/Microsoft VS Code/workspace/React_NodeBird/frontend/sagas/user.js"],"names":["all","delay","fork","put","takeEvery","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","login","type","e","console","error","watchLogin","signUpAPI","signUp","Error","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP;;AASA,SAASC,QAAT,GAAoB,CAClB;AACA;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEN;AADE,KAAD,CAAT;AAGD,GAND,CAMC,OAAOO,CAAP,EAAU;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMZ,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUY,UAAV,GAAuB;AACrB,QAAMd,SAAS,CAACG,cAAD,EAAiBM,KAAjB,CAAf;AACD;;AAED,SAASM,SAAT,GAAqB,CACnB;AACA;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAM,IAAIoB,KAAJ,CAAU,QAAV,CAAN;AACA,UAAMlB,GAAG,CAAC;AAAE;AACVW,MAAAA,IAAI,EAAEH;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOI,CAAP,EAAU;AAAE;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMZ,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEL,eADE;AAERQ,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,WAAV,GAAwB;AACtB,QAAMlB,SAAS,CAACM,eAAD,EAAkBU,MAAlB,CAAf;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CACRE,IAAI,CAACgB,UAAD,CADI,EAERhB,IAAI,CAACoB,WAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  // return axios.post('/login');\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    // yield call(loginAPI);\r\n    yield delay(2000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  }catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction signUpAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  //return axios.post('/login');\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // yield call(signUpAPI);\r\n    yield delay(2000);\r\n    throw new Error('에러에러에러');\r\n    yield put({ // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n "]},"metadata":{},"sourceType":"module"}